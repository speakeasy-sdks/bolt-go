// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/bolt-go/internal/utils"
)

// SchemasAddressReferenceExplicitTag - The type of address reference
type SchemasAddressReferenceExplicitTag string

const (
	SchemasAddressReferenceExplicitTagExplicit SchemasAddressReferenceExplicitTag = "explicit"
)

func (e SchemasAddressReferenceExplicitTag) ToPointer() *SchemasAddressReferenceExplicitTag {
	return &e
}

func (e *SchemasAddressReferenceExplicitTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "explicit":
		*e = SchemasAddressReferenceExplicitTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasAddressReferenceExplicitTag: %v", v)
	}
}

// SchemasCountryCode - The country (in its ISO 3166 alpha-2 format) associated with this address.
type SchemasCountryCode string

const (
	SchemasCountryCodeAf SchemasCountryCode = "AF"
	SchemasCountryCodeAx SchemasCountryCode = "AX"
	SchemasCountryCodeAl SchemasCountryCode = "AL"
	SchemasCountryCodeDz SchemasCountryCode = "DZ"
	SchemasCountryCodeAs SchemasCountryCode = "AS"
	SchemasCountryCodeAd SchemasCountryCode = "AD"
	SchemasCountryCodeAo SchemasCountryCode = "AO"
	SchemasCountryCodeAi SchemasCountryCode = "AI"
	SchemasCountryCodeAq SchemasCountryCode = "AQ"
	SchemasCountryCodeAg SchemasCountryCode = "AG"
	SchemasCountryCodeAr SchemasCountryCode = "AR"
	SchemasCountryCodeAm SchemasCountryCode = "AM"
	SchemasCountryCodeAw SchemasCountryCode = "AW"
	SchemasCountryCodeAu SchemasCountryCode = "AU"
	SchemasCountryCodeAt SchemasCountryCode = "AT"
	SchemasCountryCodeAz SchemasCountryCode = "AZ"
	SchemasCountryCodeBh SchemasCountryCode = "BH"
	SchemasCountryCodeBs SchemasCountryCode = "BS"
	SchemasCountryCodeBd SchemasCountryCode = "BD"
	SchemasCountryCodeBb SchemasCountryCode = "BB"
	SchemasCountryCodeBy SchemasCountryCode = "BY"
	SchemasCountryCodeBe SchemasCountryCode = "BE"
	SchemasCountryCodeBz SchemasCountryCode = "BZ"
	SchemasCountryCodeBj SchemasCountryCode = "BJ"
	SchemasCountryCodeBm SchemasCountryCode = "BM"
	SchemasCountryCodeBt SchemasCountryCode = "BT"
	SchemasCountryCodeBo SchemasCountryCode = "BO"
	SchemasCountryCodeBq SchemasCountryCode = "BQ"
	SchemasCountryCodeBa SchemasCountryCode = "BA"
	SchemasCountryCodeBw SchemasCountryCode = "BW"
	SchemasCountryCodeBv SchemasCountryCode = "BV"
	SchemasCountryCodeBr SchemasCountryCode = "BR"
	SchemasCountryCodeIo SchemasCountryCode = "IO"
	SchemasCountryCodeBn SchemasCountryCode = "BN"
	SchemasCountryCodeBg SchemasCountryCode = "BG"
	SchemasCountryCodeBf SchemasCountryCode = "BF"
	SchemasCountryCodeBi SchemasCountryCode = "BI"
	SchemasCountryCodeKh SchemasCountryCode = "KH"
	SchemasCountryCodeCm SchemasCountryCode = "CM"
	SchemasCountryCodeCa SchemasCountryCode = "CA"
	SchemasCountryCodeCv SchemasCountryCode = "CV"
	SchemasCountryCodeKy SchemasCountryCode = "KY"
	SchemasCountryCodeCf SchemasCountryCode = "CF"
	SchemasCountryCodeTd SchemasCountryCode = "TD"
	SchemasCountryCodeCl SchemasCountryCode = "CL"
	SchemasCountryCodeCn SchemasCountryCode = "CN"
	SchemasCountryCodeCx SchemasCountryCode = "CX"
	SchemasCountryCodeCc SchemasCountryCode = "CC"
	SchemasCountryCodeCo SchemasCountryCode = "CO"
	SchemasCountryCodeKm SchemasCountryCode = "KM"
	SchemasCountryCodeCg SchemasCountryCode = "CG"
	SchemasCountryCodeCd SchemasCountryCode = "CD"
	SchemasCountryCodeCk SchemasCountryCode = "CK"
	SchemasCountryCodeCr SchemasCountryCode = "CR"
	SchemasCountryCodeCi SchemasCountryCode = "CI"
	SchemasCountryCodeHr SchemasCountryCode = "HR"
	SchemasCountryCodeCu SchemasCountryCode = "CU"
	SchemasCountryCodeCw SchemasCountryCode = "CW"
	SchemasCountryCodeCy SchemasCountryCode = "CY"
	SchemasCountryCodeCz SchemasCountryCode = "CZ"
	SchemasCountryCodeDk SchemasCountryCode = "DK"
	SchemasCountryCodeDj SchemasCountryCode = "DJ"
	SchemasCountryCodeDm SchemasCountryCode = "DM"
	SchemasCountryCodeDo SchemasCountryCode = "DO"
	SchemasCountryCodeEc SchemasCountryCode = "EC"
	SchemasCountryCodeEg SchemasCountryCode = "EG"
	SchemasCountryCodeSv SchemasCountryCode = "SV"
	SchemasCountryCodeGq SchemasCountryCode = "GQ"
	SchemasCountryCodeEr SchemasCountryCode = "ER"
	SchemasCountryCodeEe SchemasCountryCode = "EE"
	SchemasCountryCodeEt SchemasCountryCode = "ET"
	SchemasCountryCodeFk SchemasCountryCode = "FK"
	SchemasCountryCodeFo SchemasCountryCode = "FO"
	SchemasCountryCodeFj SchemasCountryCode = "FJ"
	SchemasCountryCodeFi SchemasCountryCode = "FI"
	SchemasCountryCodeFr SchemasCountryCode = "FR"
	SchemasCountryCodeGf SchemasCountryCode = "GF"
	SchemasCountryCodePf SchemasCountryCode = "PF"
	SchemasCountryCodeTf SchemasCountryCode = "TF"
	SchemasCountryCodeGa SchemasCountryCode = "GA"
	SchemasCountryCodeGm SchemasCountryCode = "GM"
	SchemasCountryCodeGe SchemasCountryCode = "GE"
	SchemasCountryCodeDe SchemasCountryCode = "DE"
	SchemasCountryCodeGh SchemasCountryCode = "GH"
	SchemasCountryCodeGi SchemasCountryCode = "GI"
	SchemasCountryCodeGr SchemasCountryCode = "GR"
	SchemasCountryCodeGl SchemasCountryCode = "GL"
	SchemasCountryCodeGd SchemasCountryCode = "GD"
	SchemasCountryCodeGp SchemasCountryCode = "GP"
	SchemasCountryCodeGu SchemasCountryCode = "GU"
	SchemasCountryCodeGt SchemasCountryCode = "GT"
	SchemasCountryCodeGg SchemasCountryCode = "GG"
	SchemasCountryCodeGn SchemasCountryCode = "GN"
	SchemasCountryCodeGw SchemasCountryCode = "GW"
	SchemasCountryCodeGy SchemasCountryCode = "GY"
	SchemasCountryCodeHt SchemasCountryCode = "HT"
	SchemasCountryCodeHm SchemasCountryCode = "HM"
	SchemasCountryCodeVa SchemasCountryCode = "VA"
	SchemasCountryCodeHn SchemasCountryCode = "HN"
	SchemasCountryCodeHk SchemasCountryCode = "HK"
	SchemasCountryCodeHu SchemasCountryCode = "HU"
	SchemasCountryCodeIs SchemasCountryCode = "IS"
	SchemasCountryCodeIn SchemasCountryCode = "IN"
	SchemasCountryCodeID SchemasCountryCode = "ID"
	SchemasCountryCodeIr SchemasCountryCode = "IR"
	SchemasCountryCodeIq SchemasCountryCode = "IQ"
	SchemasCountryCodeIe SchemasCountryCode = "IE"
	SchemasCountryCodeIm SchemasCountryCode = "IM"
	SchemasCountryCodeIl SchemasCountryCode = "IL"
	SchemasCountryCodeIt SchemasCountryCode = "IT"
	SchemasCountryCodeJm SchemasCountryCode = "JM"
	SchemasCountryCodeJp SchemasCountryCode = "JP"
	SchemasCountryCodeJe SchemasCountryCode = "JE"
	SchemasCountryCodeJo SchemasCountryCode = "JO"
	SchemasCountryCodeKz SchemasCountryCode = "KZ"
	SchemasCountryCodeKe SchemasCountryCode = "KE"
	SchemasCountryCodeKi SchemasCountryCode = "KI"
	SchemasCountryCodeKp SchemasCountryCode = "KP"
	SchemasCountryCodeKr SchemasCountryCode = "KR"
	SchemasCountryCodeKw SchemasCountryCode = "KW"
	SchemasCountryCodeKg SchemasCountryCode = "KG"
	SchemasCountryCodeLa SchemasCountryCode = "LA"
	SchemasCountryCodeLv SchemasCountryCode = "LV"
	SchemasCountryCodeLb SchemasCountryCode = "LB"
	SchemasCountryCodeLs SchemasCountryCode = "LS"
	SchemasCountryCodeLr SchemasCountryCode = "LR"
	SchemasCountryCodeLy SchemasCountryCode = "LY"
	SchemasCountryCodeLi SchemasCountryCode = "LI"
	SchemasCountryCodeLt SchemasCountryCode = "LT"
	SchemasCountryCodeLu SchemasCountryCode = "LU"
	SchemasCountryCodeMo SchemasCountryCode = "MO"
	SchemasCountryCodeMk SchemasCountryCode = "MK"
	SchemasCountryCodeMg SchemasCountryCode = "MG"
	SchemasCountryCodeMw SchemasCountryCode = "MW"
	SchemasCountryCodeMy SchemasCountryCode = "MY"
	SchemasCountryCodeMv SchemasCountryCode = "MV"
	SchemasCountryCodeMl SchemasCountryCode = "ML"
	SchemasCountryCodeMt SchemasCountryCode = "MT"
	SchemasCountryCodeMh SchemasCountryCode = "MH"
	SchemasCountryCodeMq SchemasCountryCode = "MQ"
	SchemasCountryCodeMr SchemasCountryCode = "MR"
	SchemasCountryCodeMu SchemasCountryCode = "MU"
	SchemasCountryCodeYt SchemasCountryCode = "YT"
	SchemasCountryCodeMx SchemasCountryCode = "MX"
	SchemasCountryCodeFm SchemasCountryCode = "FM"
	SchemasCountryCodeMd SchemasCountryCode = "MD"
	SchemasCountryCodeMc SchemasCountryCode = "MC"
	SchemasCountryCodeMn SchemasCountryCode = "MN"
	SchemasCountryCodeMe SchemasCountryCode = "ME"
	SchemasCountryCodeMs SchemasCountryCode = "MS"
	SchemasCountryCodeMa SchemasCountryCode = "MA"
	SchemasCountryCodeMz SchemasCountryCode = "MZ"
	SchemasCountryCodeMm SchemasCountryCode = "MM"
	SchemasCountryCodeNa SchemasCountryCode = "NA"
	SchemasCountryCodeNr SchemasCountryCode = "NR"
	SchemasCountryCodeNp SchemasCountryCode = "NP"
	SchemasCountryCodeNl SchemasCountryCode = "NL"
	SchemasCountryCodeNc SchemasCountryCode = "NC"
	SchemasCountryCodeNz SchemasCountryCode = "NZ"
	SchemasCountryCodeNi SchemasCountryCode = "NI"
	SchemasCountryCodeNe SchemasCountryCode = "NE"
	SchemasCountryCodeNg SchemasCountryCode = "NG"
	SchemasCountryCodeNu SchemasCountryCode = "NU"
	SchemasCountryCodeNf SchemasCountryCode = "NF"
	SchemasCountryCodeMp SchemasCountryCode = "MP"
	SchemasCountryCodeNo SchemasCountryCode = "NO"
	SchemasCountryCodeOm SchemasCountryCode = "OM"
	SchemasCountryCodePk SchemasCountryCode = "PK"
	SchemasCountryCodePw SchemasCountryCode = "PW"
	SchemasCountryCodePs SchemasCountryCode = "PS"
	SchemasCountryCodePa SchemasCountryCode = "PA"
	SchemasCountryCodePg SchemasCountryCode = "PG"
	SchemasCountryCodePy SchemasCountryCode = "PY"
	SchemasCountryCodePe SchemasCountryCode = "PE"
	SchemasCountryCodePh SchemasCountryCode = "PH"
	SchemasCountryCodePn SchemasCountryCode = "PN"
	SchemasCountryCodePl SchemasCountryCode = "PL"
	SchemasCountryCodePt SchemasCountryCode = "PT"
	SchemasCountryCodePr SchemasCountryCode = "PR"
	SchemasCountryCodeQa SchemasCountryCode = "QA"
	SchemasCountryCodeRe SchemasCountryCode = "RE"
	SchemasCountryCodeRo SchemasCountryCode = "RO"
	SchemasCountryCodeRu SchemasCountryCode = "RU"
	SchemasCountryCodeRw SchemasCountryCode = "RW"
	SchemasCountryCodeBl SchemasCountryCode = "BL"
	SchemasCountryCodeSh SchemasCountryCode = "SH"
	SchemasCountryCodeKn SchemasCountryCode = "KN"
	SchemasCountryCodeLc SchemasCountryCode = "LC"
	SchemasCountryCodeMf SchemasCountryCode = "MF"
	SchemasCountryCodePm SchemasCountryCode = "PM"
	SchemasCountryCodeVc SchemasCountryCode = "VC"
	SchemasCountryCodeWs SchemasCountryCode = "WS"
	SchemasCountryCodeSm SchemasCountryCode = "SM"
	SchemasCountryCodeSt SchemasCountryCode = "ST"
	SchemasCountryCodeSa SchemasCountryCode = "SA"
	SchemasCountryCodeSn SchemasCountryCode = "SN"
	SchemasCountryCodeRs SchemasCountryCode = "RS"
	SchemasCountryCodeSc SchemasCountryCode = "SC"
	SchemasCountryCodeSl SchemasCountryCode = "SL"
	SchemasCountryCodeSg SchemasCountryCode = "SG"
	SchemasCountryCodeSx SchemasCountryCode = "SX"
	SchemasCountryCodeSk SchemasCountryCode = "SK"
	SchemasCountryCodeSi SchemasCountryCode = "SI"
	SchemasCountryCodeSb SchemasCountryCode = "SB"
	SchemasCountryCodeSo SchemasCountryCode = "SO"
	SchemasCountryCodeZa SchemasCountryCode = "ZA"
	SchemasCountryCodeGs SchemasCountryCode = "GS"
	SchemasCountryCodeSs SchemasCountryCode = "SS"
	SchemasCountryCodeEs SchemasCountryCode = "ES"
	SchemasCountryCodeLk SchemasCountryCode = "LK"
	SchemasCountryCodeSd SchemasCountryCode = "SD"
	SchemasCountryCodeSr SchemasCountryCode = "SR"
	SchemasCountryCodeSj SchemasCountryCode = "SJ"
	SchemasCountryCodeSz SchemasCountryCode = "SZ"
	SchemasCountryCodeSe SchemasCountryCode = "SE"
	SchemasCountryCodeCh SchemasCountryCode = "CH"
	SchemasCountryCodeSy SchemasCountryCode = "SY"
	SchemasCountryCodeTw SchemasCountryCode = "TW"
	SchemasCountryCodeTj SchemasCountryCode = "TJ"
	SchemasCountryCodeTz SchemasCountryCode = "TZ"
	SchemasCountryCodeTh SchemasCountryCode = "TH"
	SchemasCountryCodeTl SchemasCountryCode = "TL"
	SchemasCountryCodeTg SchemasCountryCode = "TG"
	SchemasCountryCodeTk SchemasCountryCode = "TK"
	SchemasCountryCodeTo SchemasCountryCode = "TO"
	SchemasCountryCodeTt SchemasCountryCode = "TT"
	SchemasCountryCodeTn SchemasCountryCode = "TN"
	SchemasCountryCodeTr SchemasCountryCode = "TR"
	SchemasCountryCodeTm SchemasCountryCode = "TM"
	SchemasCountryCodeTc SchemasCountryCode = "TC"
	SchemasCountryCodeTv SchemasCountryCode = "TV"
	SchemasCountryCodeUg SchemasCountryCode = "UG"
	SchemasCountryCodeUa SchemasCountryCode = "UA"
	SchemasCountryCodeAe SchemasCountryCode = "AE"
	SchemasCountryCodeGb SchemasCountryCode = "GB"
	SchemasCountryCodeUs SchemasCountryCode = "US"
	SchemasCountryCodeUm SchemasCountryCode = "UM"
	SchemasCountryCodeUy SchemasCountryCode = "UY"
	SchemasCountryCodeUz SchemasCountryCode = "UZ"
	SchemasCountryCodeVu SchemasCountryCode = "VU"
	SchemasCountryCodeVe SchemasCountryCode = "VE"
	SchemasCountryCodeVn SchemasCountryCode = "VN"
	SchemasCountryCodeVg SchemasCountryCode = "VG"
	SchemasCountryCodeVi SchemasCountryCode = "VI"
	SchemasCountryCodeWf SchemasCountryCode = "WF"
	SchemasCountryCodeEh SchemasCountryCode = "EH"
	SchemasCountryCodeYe SchemasCountryCode = "YE"
	SchemasCountryCodeZm SchemasCountryCode = "ZM"
	SchemasCountryCodeZw SchemasCountryCode = "ZW"
)

func (e SchemasCountryCode) ToPointer() *SchemasCountryCode {
	return &e
}

func (e *SchemasCountryCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AF":
		fallthrough
	case "AX":
		fallthrough
	case "AL":
		fallthrough
	case "DZ":
		fallthrough
	case "AS":
		fallthrough
	case "AD":
		fallthrough
	case "AO":
		fallthrough
	case "AI":
		fallthrough
	case "AQ":
		fallthrough
	case "AG":
		fallthrough
	case "AR":
		fallthrough
	case "AM":
		fallthrough
	case "AW":
		fallthrough
	case "AU":
		fallthrough
	case "AT":
		fallthrough
	case "AZ":
		fallthrough
	case "BH":
		fallthrough
	case "BS":
		fallthrough
	case "BD":
		fallthrough
	case "BB":
		fallthrough
	case "BY":
		fallthrough
	case "BE":
		fallthrough
	case "BZ":
		fallthrough
	case "BJ":
		fallthrough
	case "BM":
		fallthrough
	case "BT":
		fallthrough
	case "BO":
		fallthrough
	case "BQ":
		fallthrough
	case "BA":
		fallthrough
	case "BW":
		fallthrough
	case "BV":
		fallthrough
	case "BR":
		fallthrough
	case "IO":
		fallthrough
	case "BN":
		fallthrough
	case "BG":
		fallthrough
	case "BF":
		fallthrough
	case "BI":
		fallthrough
	case "KH":
		fallthrough
	case "CM":
		fallthrough
	case "CA":
		fallthrough
	case "CV":
		fallthrough
	case "KY":
		fallthrough
	case "CF":
		fallthrough
	case "TD":
		fallthrough
	case "CL":
		fallthrough
	case "CN":
		fallthrough
	case "CX":
		fallthrough
	case "CC":
		fallthrough
	case "CO":
		fallthrough
	case "KM":
		fallthrough
	case "CG":
		fallthrough
	case "CD":
		fallthrough
	case "CK":
		fallthrough
	case "CR":
		fallthrough
	case "CI":
		fallthrough
	case "HR":
		fallthrough
	case "CU":
		fallthrough
	case "CW":
		fallthrough
	case "CY":
		fallthrough
	case "CZ":
		fallthrough
	case "DK":
		fallthrough
	case "DJ":
		fallthrough
	case "DM":
		fallthrough
	case "DO":
		fallthrough
	case "EC":
		fallthrough
	case "EG":
		fallthrough
	case "SV":
		fallthrough
	case "GQ":
		fallthrough
	case "ER":
		fallthrough
	case "EE":
		fallthrough
	case "ET":
		fallthrough
	case "FK":
		fallthrough
	case "FO":
		fallthrough
	case "FJ":
		fallthrough
	case "FI":
		fallthrough
	case "FR":
		fallthrough
	case "GF":
		fallthrough
	case "PF":
		fallthrough
	case "TF":
		fallthrough
	case "GA":
		fallthrough
	case "GM":
		fallthrough
	case "GE":
		fallthrough
	case "DE":
		fallthrough
	case "GH":
		fallthrough
	case "GI":
		fallthrough
	case "GR":
		fallthrough
	case "GL":
		fallthrough
	case "GD":
		fallthrough
	case "GP":
		fallthrough
	case "GU":
		fallthrough
	case "GT":
		fallthrough
	case "GG":
		fallthrough
	case "GN":
		fallthrough
	case "GW":
		fallthrough
	case "GY":
		fallthrough
	case "HT":
		fallthrough
	case "HM":
		fallthrough
	case "VA":
		fallthrough
	case "HN":
		fallthrough
	case "HK":
		fallthrough
	case "HU":
		fallthrough
	case "IS":
		fallthrough
	case "IN":
		fallthrough
	case "ID":
		fallthrough
	case "IR":
		fallthrough
	case "IQ":
		fallthrough
	case "IE":
		fallthrough
	case "IM":
		fallthrough
	case "IL":
		fallthrough
	case "IT":
		fallthrough
	case "JM":
		fallthrough
	case "JP":
		fallthrough
	case "JE":
		fallthrough
	case "JO":
		fallthrough
	case "KZ":
		fallthrough
	case "KE":
		fallthrough
	case "KI":
		fallthrough
	case "KP":
		fallthrough
	case "KR":
		fallthrough
	case "KW":
		fallthrough
	case "KG":
		fallthrough
	case "LA":
		fallthrough
	case "LV":
		fallthrough
	case "LB":
		fallthrough
	case "LS":
		fallthrough
	case "LR":
		fallthrough
	case "LY":
		fallthrough
	case "LI":
		fallthrough
	case "LT":
		fallthrough
	case "LU":
		fallthrough
	case "MO":
		fallthrough
	case "MK":
		fallthrough
	case "MG":
		fallthrough
	case "MW":
		fallthrough
	case "MY":
		fallthrough
	case "MV":
		fallthrough
	case "ML":
		fallthrough
	case "MT":
		fallthrough
	case "MH":
		fallthrough
	case "MQ":
		fallthrough
	case "MR":
		fallthrough
	case "MU":
		fallthrough
	case "YT":
		fallthrough
	case "MX":
		fallthrough
	case "FM":
		fallthrough
	case "MD":
		fallthrough
	case "MC":
		fallthrough
	case "MN":
		fallthrough
	case "ME":
		fallthrough
	case "MS":
		fallthrough
	case "MA":
		fallthrough
	case "MZ":
		fallthrough
	case "MM":
		fallthrough
	case "NA":
		fallthrough
	case "NR":
		fallthrough
	case "NP":
		fallthrough
	case "NL":
		fallthrough
	case "NC":
		fallthrough
	case "NZ":
		fallthrough
	case "NI":
		fallthrough
	case "NE":
		fallthrough
	case "NG":
		fallthrough
	case "NU":
		fallthrough
	case "NF":
		fallthrough
	case "MP":
		fallthrough
	case "NO":
		fallthrough
	case "OM":
		fallthrough
	case "PK":
		fallthrough
	case "PW":
		fallthrough
	case "PS":
		fallthrough
	case "PA":
		fallthrough
	case "PG":
		fallthrough
	case "PY":
		fallthrough
	case "PE":
		fallthrough
	case "PH":
		fallthrough
	case "PN":
		fallthrough
	case "PL":
		fallthrough
	case "PT":
		fallthrough
	case "PR":
		fallthrough
	case "QA":
		fallthrough
	case "RE":
		fallthrough
	case "RO":
		fallthrough
	case "RU":
		fallthrough
	case "RW":
		fallthrough
	case "BL":
		fallthrough
	case "SH":
		fallthrough
	case "KN":
		fallthrough
	case "LC":
		fallthrough
	case "MF":
		fallthrough
	case "PM":
		fallthrough
	case "VC":
		fallthrough
	case "WS":
		fallthrough
	case "SM":
		fallthrough
	case "ST":
		fallthrough
	case "SA":
		fallthrough
	case "SN":
		fallthrough
	case "RS":
		fallthrough
	case "SC":
		fallthrough
	case "SL":
		fallthrough
	case "SG":
		fallthrough
	case "SX":
		fallthrough
	case "SK":
		fallthrough
	case "SI":
		fallthrough
	case "SB":
		fallthrough
	case "SO":
		fallthrough
	case "ZA":
		fallthrough
	case "GS":
		fallthrough
	case "SS":
		fallthrough
	case "ES":
		fallthrough
	case "LK":
		fallthrough
	case "SD":
		fallthrough
	case "SR":
		fallthrough
	case "SJ":
		fallthrough
	case "SZ":
		fallthrough
	case "SE":
		fallthrough
	case "CH":
		fallthrough
	case "SY":
		fallthrough
	case "TW":
		fallthrough
	case "TJ":
		fallthrough
	case "TZ":
		fallthrough
	case "TH":
		fallthrough
	case "TL":
		fallthrough
	case "TG":
		fallthrough
	case "TK":
		fallthrough
	case "TO":
		fallthrough
	case "TT":
		fallthrough
	case "TN":
		fallthrough
	case "TR":
		fallthrough
	case "TM":
		fallthrough
	case "TC":
		fallthrough
	case "TV":
		fallthrough
	case "UG":
		fallthrough
	case "UA":
		fallthrough
	case "AE":
		fallthrough
	case "GB":
		fallthrough
	case "US":
		fallthrough
	case "UM":
		fallthrough
	case "UY":
		fallthrough
	case "UZ":
		fallthrough
	case "VU":
		fallthrough
	case "VE":
		fallthrough
	case "VN":
		fallthrough
	case "VG":
		fallthrough
	case "VI":
		fallthrough
	case "WF":
		fallthrough
	case "EH":
		fallthrough
	case "YE":
		fallthrough
	case "ZM":
		fallthrough
	case "ZW":
		*e = SchemasCountryCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasCountryCode: %v", v)
	}
}

// SchemasInput - A physical address.
type SchemasInput struct {
	// The type of address reference
	DotTag SchemasAddressReferenceExplicitTag `json:".tag"`
	// The first name of the person associated with this address.
	FirstName string `json:"first_name"`
	// The last name of the person associated with this address.
	LastName string `json:"last_name"`
	// The company associated with this address.
	Company *string `json:"company,omitempty"`
	// The street address associated with this address.
	StreetAddress1 string `json:"street_address1"`
	// Any additional, optional, street address information associated with this address.
	StreetAddress2 *string `json:"street_address2,omitempty"`
	// The locality (e.g. city, town, etc...) associated with this address.
	Locality string `json:"locality"`
	// The postal code associated with this address.
	PostalCode string `json:"postal_code"`
	// The region or administrative area (e.g. state, province, county, etc...) associated with this address.
	Region *string `json:"region,omitempty"`
	// The country (in its ISO 3166 alpha-2 format) associated with this address.
	CountryCode SchemasCountryCode `json:"country_code"`
	// The email address associated with this address.
	Email *string `json:"email,omitempty"`
	// The phone number associated with this address.
	Phone *string `json:"phone,omitempty"`
}

func (o *SchemasInput) GetDotTag() SchemasAddressReferenceExplicitTag {
	if o == nil {
		return SchemasAddressReferenceExplicitTag("")
	}
	return o.DotTag
}

func (o *SchemasInput) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *SchemasInput) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *SchemasInput) GetCompany() *string {
	if o == nil {
		return nil
	}
	return o.Company
}

func (o *SchemasInput) GetStreetAddress1() string {
	if o == nil {
		return ""
	}
	return o.StreetAddress1
}

func (o *SchemasInput) GetStreetAddress2() *string {
	if o == nil {
		return nil
	}
	return o.StreetAddress2
}

func (o *SchemasInput) GetLocality() string {
	if o == nil {
		return ""
	}
	return o.Locality
}

func (o *SchemasInput) GetPostalCode() string {
	if o == nil {
		return ""
	}
	return o.PostalCode
}

func (o *SchemasInput) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SchemasInput) GetCountryCode() SchemasCountryCode {
	if o == nil {
		return SchemasCountryCode("")
	}
	return o.CountryCode
}

func (o *SchemasInput) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *SchemasInput) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

// SchemasTag - The type of address reference
type SchemasTag string

const (
	SchemasTagID SchemasTag = "id"
)

func (e SchemasTag) ToPointer() *SchemasTag {
	return &e
}

func (e *SchemasTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		*e = SchemasTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasTag: %v", v)
	}
}

type Schemas struct {
	// The type of address reference
	DotTag SchemasTag `json:".tag"`
	// The address's ID
	ID string `json:"id"`
}

func (o *Schemas) GetDotTag() SchemasTag {
	if o == nil {
		return SchemasTag("")
	}
	return o.DotTag
}

func (o *Schemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type AddressReferenceType string

const (
	AddressReferenceTypeID       AddressReferenceType = "id"
	AddressReferenceTypeExplicit AddressReferenceType = "explicit"
)

type AddressReference struct {
	Schemas      *Schemas
	SchemasInput *SchemasInput

	Type AddressReferenceType
}

func CreateAddressReferenceID(id Schemas) AddressReference {
	typ := AddressReferenceTypeID

	typStr := SchemasTag(typ)
	id.DotTag = typStr

	return AddressReference{
		Schemas: &id,
		Type:    typ,
	}
}

func CreateAddressReferenceExplicit(explicit SchemasInput) AddressReference {
	typ := AddressReferenceTypeExplicit

	typStr := SchemasAddressReferenceExplicitTag(typ)
	explicit.DotTag = typStr

	return AddressReference{
		SchemasInput: &explicit,
		Type:         typ,
	}
}

func (u *AddressReference) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		DotTag string `json:".tag"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.DotTag {
	case "id":
		schemas := new(Schemas)
		if err := utils.UnmarshalJSON(data, &schemas, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.Schemas = schemas
		u.Type = AddressReferenceTypeID
		return nil
	case "explicit":
		schemasInput := new(SchemasInput)
		if err := utils.UnmarshalJSON(data, &schemasInput, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.SchemasInput = schemasInput
		u.Type = AddressReferenceTypeExplicit
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AddressReference) MarshalJSON() ([]byte, error) {
	if u.Schemas != nil {
		return utils.MarshalJSON(u.Schemas, "", true)
	}

	if u.SchemasInput != nil {
		return utils.MarshalJSON(u.SchemasInput, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
