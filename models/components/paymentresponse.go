// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/bolt-go/internal/utils"
)

type SchemasStatus string

const (
	SchemasStatusAwaitingUserConfirmation SchemasStatus = "awaiting_user_confirmation"
)

func (e SchemasStatus) ToPointer() *SchemasStatus {
	return &e
}

func (e *SchemasStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "awaiting_user_confirmation":
		*e = SchemasStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasStatus: %v", v)
	}
}

type Action string

const (
	ActionRedirect Action = "redirect"
)

func (e Action) ToPointer() *Action {
	return &e
}

func (e *Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redirect":
		*e = Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action: %v", v)
	}
}

type PaymentResponsePendingSchemas struct {
	Status SchemasStatus `json:"status"`
	Action Action        `json:"action"`
	URL    string        `json:"url"`
	ID     *string       `json:"id,omitempty"`
}

func (o *PaymentResponsePendingSchemas) GetStatus() SchemasStatus {
	if o == nil {
		return SchemasStatus("")
	}
	return o.Status
}

func (o *PaymentResponsePendingSchemas) GetAction() Action {
	if o == nil {
		return Action("")
	}
	return o.Action
}

func (o *PaymentResponsePendingSchemas) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *PaymentResponsePendingSchemas) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type Status string

const (
	StatusSuccess Status = "success"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type PaymentResponseFinalizedSchemas struct {
	Status      Status      `json:"status"`
	Transaction Transaction `json:"transaction"`
	ID          *string     `json:"id,omitempty"`
}

func (o *PaymentResponseFinalizedSchemas) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *PaymentResponseFinalizedSchemas) GetTransaction() Transaction {
	if o == nil {
		return Transaction{}
	}
	return o.Transaction
}

func (o *PaymentResponseFinalizedSchemas) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type PaymentResponseType string

const (
	PaymentResponseTypePaymentResponseFinalizedSchemas PaymentResponseType = "payment-response-finalized_Schemas"
	PaymentResponseTypePaymentResponsePendingSchemas   PaymentResponseType = "payment-response-pending_Schemas"
)

type PaymentResponse struct {
	PaymentResponseFinalizedSchemas *PaymentResponseFinalizedSchemas
	PaymentResponsePendingSchemas   *PaymentResponsePendingSchemas

	Type PaymentResponseType
}

func CreatePaymentResponsePaymentResponseFinalizedSchemas(paymentResponseFinalizedSchemas PaymentResponseFinalizedSchemas) PaymentResponse {
	typ := PaymentResponseTypePaymentResponseFinalizedSchemas

	return PaymentResponse{
		PaymentResponseFinalizedSchemas: &paymentResponseFinalizedSchemas,
		Type:                            typ,
	}
}

func CreatePaymentResponsePaymentResponsePendingSchemas(paymentResponsePendingSchemas PaymentResponsePendingSchemas) PaymentResponse {
	typ := PaymentResponseTypePaymentResponsePendingSchemas

	return PaymentResponse{
		PaymentResponsePendingSchemas: &paymentResponsePendingSchemas,
		Type:                          typ,
	}
}

func (u *PaymentResponse) UnmarshalJSON(data []byte) error {

	paymentResponseFinalizedSchemas := PaymentResponseFinalizedSchemas{}
	if err := utils.UnmarshalJSON(data, &paymentResponseFinalizedSchemas, "", true, true); err == nil {
		u.PaymentResponseFinalizedSchemas = &paymentResponseFinalizedSchemas
		u.Type = PaymentResponseTypePaymentResponseFinalizedSchemas
		return nil
	}

	paymentResponsePendingSchemas := PaymentResponsePendingSchemas{}
	if err := utils.UnmarshalJSON(data, &paymentResponsePendingSchemas, "", true, true); err == nil {
		u.PaymentResponsePendingSchemas = &paymentResponsePendingSchemas
		u.Type = PaymentResponseTypePaymentResponsePendingSchemas
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PaymentResponse) MarshalJSON() ([]byte, error) {
	if u.PaymentResponseFinalizedSchemas != nil {
		return utils.MarshalJSON(u.PaymentResponseFinalizedSchemas, "", true)
	}

	if u.PaymentResponsePendingSchemas != nil {
		return utils.MarshalJSON(u.PaymentResponsePendingSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
