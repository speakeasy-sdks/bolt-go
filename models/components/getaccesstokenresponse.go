// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type RefreshTokenScope string

const (
	RefreshTokenScopeBoltAccountManage RefreshTokenScope = "bolt.account.manage"
	RefreshTokenScopeBoltAccountView   RefreshTokenScope = "bolt.account.view"
	RefreshTokenScopeOpenid            RefreshTokenScope = "openid"
)

func (e RefreshTokenScope) ToPointer() *RefreshTokenScope {
	return &e
}

func (e *RefreshTokenScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bolt.account.manage":
		fallthrough
	case "bolt.account.view":
		fallthrough
	case "openid":
		*e = RefreshTokenScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefreshTokenScope: %v", v)
	}
}

type GetAccessTokenResponseScope string

const (
	GetAccessTokenResponseScopeBoltAccountManage GetAccessTokenResponseScope = "bolt.account.manage"
	GetAccessTokenResponseScopeBoltAccountView   GetAccessTokenResponseScope = "bolt.account.view"
	GetAccessTokenResponseScopeOpenid            GetAccessTokenResponseScope = "openid"
)

func (e GetAccessTokenResponseScope) ToPointer() *GetAccessTokenResponseScope {
	return &e
}

func (e *GetAccessTokenResponseScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bolt.account.manage":
		fallthrough
	case "bolt.account.view":
		fallthrough
	case "openid":
		*e = GetAccessTokenResponseScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccessTokenResponseScope: %v", v)
	}
}

type GetAccessTokenResponse struct {
	// A JWT token issued when the request includes the scope open_id.
	IDToken *string `json:"id_token,omitempty"`
	// An access token you can use to make requests on behalf of a Bolt Account.
	AccessToken *string `json:"access_token,omitempty"`
	// Access tokenâ€™s expiration in seconds.
	ExpiresIn *int64 `json:"expires_in,omitempty"`
	// A refresh token you can use to issue a brand new access token without obtaining a new authorization code.
	RefreshToken *string `json:"refresh_token,omitempty"`
	// The scope granted to the refresh token. Currently this will always be bolt.account.view.
	RefreshTokenScope []RefreshTokenScope `json:"refresh_token_scope,omitempty"`
	// The scope granted to access token, depending on the scope granted to the authorization code as well as the scope parameter.
	// Options include `bolt.account.manage`, `bolt.account.view`, `openid`.'
	//
	Scope []GetAccessTokenResponseScope `json:"scope,omitempty"`
	// The token_type will always be bearer.
	TokenType *string `json:"token_type,omitempty"`
}

func (o *GetAccessTokenResponse) GetIDToken() *string {
	if o == nil {
		return nil
	}
	return o.IDToken
}

func (o *GetAccessTokenResponse) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *GetAccessTokenResponse) GetExpiresIn() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiresIn
}

func (o *GetAccessTokenResponse) GetRefreshToken() *string {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

func (o *GetAccessTokenResponse) GetRefreshTokenScope() []RefreshTokenScope {
	if o == nil {
		return nil
	}
	return o.RefreshTokenScope
}

func (o *GetAccessTokenResponse) GetScope() []GetAccessTokenResponseScope {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *GetAccessTokenResponse) GetTokenType() *string {
	if o == nil {
		return nil
	}
	return o.TokenType
}
